# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import news_service_pb2 as news__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in news_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NewsServiceStub(object):
    """gRPC service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchNews = channel.unary_unary(
                '/news_crawler.NewsService/SearchNews',
                request_serializer=news__service__pb2.SearchNewsRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsResponse.FromString,
                _registered_method=True)
        self.GetRecentNews = channel.unary_unary(
                '/news_crawler.NewsService/GetRecentNews',
                request_serializer=news__service__pb2.GetRecentNewsRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsResponse.FromString,
                _registered_method=True)
        self.GetNewsBySource = channel.unary_unary(
                '/news_crawler.NewsService/GetNewsBySource',
                request_serializer=news__service__pb2.GetNewsBySourceRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsResponse.FromString,
                _registered_method=True)
        self.SearchByKeywords = channel.unary_unary(
                '/news_crawler.NewsService/SearchByKeywords',
                request_serializer=news__service__pb2.SearchByKeywordsRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsResponse.FromString,
                _registered_method=True)
        self.GetNewsByTags = channel.unary_unary(
                '/news_crawler.NewsService/GetNewsByTags',
                request_serializer=news__service__pb2.GetNewsByTagsRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsResponse.FromString,
                _registered_method=True)
        self.GetNewsItem = channel.unary_unary(
                '/news_crawler.NewsService/GetNewsItem',
                request_serializer=news__service__pb2.GetNewsItemRequest.SerializeToString,
                response_deserializer=news__service__pb2.NewsItemResponse.FromString,
                _registered_method=True)
        self.GetAvailableTags = channel.unary_unary(
                '/news_crawler.NewsService/GetAvailableTags',
                request_serializer=news__service__pb2.GetAvailableTagsRequest.SerializeToString,
                response_deserializer=news__service__pb2.AvailableTagsResponse.FromString,
                _registered_method=True)
        self.GetNewsStatistics = channel.unary_unary(
                '/news_crawler.NewsService/GetNewsStatistics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=news__service__pb2.NewsStatsResponse.FromString,
                _registered_method=True)
        self.DeleteNewsItem = channel.unary_unary(
                '/news_crawler.NewsService/DeleteNewsItem',
                request_serializer=news__service__pb2.DeleteNewsItemRequest.SerializeToString,
                response_deserializer=news__service__pb2.DeleteResponse.FromString,
                _registered_method=True)


class NewsServiceServicer(object):
    """gRPC service definition
    """

    def SearchNews(self, request, context):
        """Search news with flexible filters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecentNews(self, request, context):
        """Get recent news
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewsBySource(self, request, context):
        """Get news by source
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchByKeywords(self, request, context):
        """Search by keywords
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewsByTags(self, request, context):
        """Get news by tags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewsItem(self, request, context):
        """Get specific news item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableTags(self, request, context):
        """Get available tags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewsStatistics(self, request, context):
        """Get news statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNewsItem(self, request, context):
        """Delete news item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NewsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchNews': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchNews,
                    request_deserializer=news__service__pb2.SearchNewsRequest.FromString,
                    response_serializer=news__service__pb2.NewsResponse.SerializeToString,
            ),
            'GetRecentNews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentNews,
                    request_deserializer=news__service__pb2.GetRecentNewsRequest.FromString,
                    response_serializer=news__service__pb2.NewsResponse.SerializeToString,
            ),
            'GetNewsBySource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewsBySource,
                    request_deserializer=news__service__pb2.GetNewsBySourceRequest.FromString,
                    response_serializer=news__service__pb2.NewsResponse.SerializeToString,
            ),
            'SearchByKeywords': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchByKeywords,
                    request_deserializer=news__service__pb2.SearchByKeywordsRequest.FromString,
                    response_serializer=news__service__pb2.NewsResponse.SerializeToString,
            ),
            'GetNewsByTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewsByTags,
                    request_deserializer=news__service__pb2.GetNewsByTagsRequest.FromString,
                    response_serializer=news__service__pb2.NewsResponse.SerializeToString,
            ),
            'GetNewsItem': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewsItem,
                    request_deserializer=news__service__pb2.GetNewsItemRequest.FromString,
                    response_serializer=news__service__pb2.NewsItemResponse.SerializeToString,
            ),
            'GetAvailableTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableTags,
                    request_deserializer=news__service__pb2.GetAvailableTagsRequest.FromString,
                    response_serializer=news__service__pb2.AvailableTagsResponse.SerializeToString,
            ),
            'GetNewsStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewsStatistics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=news__service__pb2.NewsStatsResponse.SerializeToString,
            ),
            'DeleteNewsItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNewsItem,
                    request_deserializer=news__service__pb2.DeleteNewsItemRequest.FromString,
                    response_serializer=news__service__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'news_crawler.NewsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('news_crawler.NewsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NewsService(object):
    """gRPC service definition
    """

    @staticmethod
    def SearchNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/SearchNews',
            news__service__pb2.SearchNewsRequest.SerializeToString,
            news__service__pb2.NewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecentNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetRecentNews',
            news__service__pb2.GetRecentNewsRequest.SerializeToString,
            news__service__pb2.NewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNewsBySource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetNewsBySource',
            news__service__pb2.GetNewsBySourceRequest.SerializeToString,
            news__service__pb2.NewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchByKeywords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/SearchByKeywords',
            news__service__pb2.SearchByKeywordsRequest.SerializeToString,
            news__service__pb2.NewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNewsByTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetNewsByTags',
            news__service__pb2.GetNewsByTagsRequest.SerializeToString,
            news__service__pb2.NewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNewsItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetNewsItem',
            news__service__pb2.GetNewsItemRequest.SerializeToString,
            news__service__pb2.NewsItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetAvailableTags',
            news__service__pb2.GetAvailableTagsRequest.SerializeToString,
            news__service__pb2.AvailableTagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNewsStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/GetNewsStatistics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            news__service__pb2.NewsStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNewsItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/news_crawler.NewsService/DeleteNewsItem',
            news__service__pb2.DeleteNewsItemRequest.SerializeToString,
            news__service__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
