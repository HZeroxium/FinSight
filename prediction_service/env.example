# =============================================================================
# FIN SIGHT PREDICTION SERVICE - COMPLETE ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and customize for your environment
# All variables support environment variable override and are validated at startup

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================
# Application information and version
APP_NAME=FinSight Prediction Service
APP_VERSION=1.0.0
DEBUG=false

# API binding configuration
API_HOST=0.0.0.0
API_PORT=8000

# =============================================================================
# EUREKA CLIENT CONFIGURATION
# =============================================================================
# Service discovery and registration with Eureka server
ENABLE_EUREKA_CLIENT=true
EUREKA_SERVER_URL=http://localhost:8761
EUREKA_APP_NAME=prediction-service

# Instance identification and networking
EUREKA_INSTANCE_ID=
EUREKA_HOST_NAME=
EUREKA_IP_ADDRESS=
EUREKA_PORT=8000
EUREKA_SECURE_PORT=8443
EUREKA_SECURE_PORT_ENABLED=false

# Instance URLs for health checks and status
EUREKA_HOME_PAGE_URL=
EUREKA_STATUS_PAGE_URL=
EUREKA_HEALTH_CHECK_URL=

# VIP addresses for load balancing
EUREKA_VIP_ADDRESS=
EUREKA_SECURE_VIP_ADDRESS=
EUREKA_PREFER_IP_ADDRESS=true

# =============================================================================
# EUREKA TIMING CONFIGURATION
# =============================================================================
# Lease management for service registration
EUREKA_LEASE_RENEWAL_INTERVAL_IN_SECONDS=30
EUREKA_LEASE_EXPIRATION_DURATION_IN_SECONDS=90

# Registry operations and synchronization
EUREKA_REGISTRY_FETCH_INTERVAL_SECONDS=30
EUREKA_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS=30
EUREKA_INITIAL_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS=40

# Heartbeat settings for service health monitoring
EUREKA_HEARTBEAT_INTERVAL_SECONDS=30

# =============================================================================
# EUREKA RETRY CONFIGURATION
# =============================================================================
# Registration retry settings with exponential backoff
EUREKA_REGISTRATION_RETRY_ATTEMPTS=3
EUREKA_REGISTRATION_RETRY_DELAY_SECONDS=5

# Heartbeat retry settings for connection resilience
EUREKA_HEARTBEAT_RETRY_ATTEMPTS=3
EUREKA_HEARTBEAT_RETRY_DELAY_SECONDS=2

# Retry backoff configuration for network issues
EUREKA_RETRY_BACKOFF_MULTIPLIER=2.0
EUREKA_MAX_RETRY_DELAY_SECONDS=60

# Auto-reregistration for service recovery
EUREKA_ENABLE_AUTO_RE_REGISTRATION=true
EUREKA_RE_REGISTRATION_DELAY_SECONDS=10

# =============================================================================
# DIRECTORY CONFIGURATION
# =============================================================================
# Base directory paths (relative to prediction_service root)
# Leave empty to use defaults, or specify absolute paths
BASE_DIR=
DATA_DIR=
MODELS_DIR=
LOGS_DIR=
JOBS_DIR=

# =============================================================================
# MODEL MANAGEMENT CONFIGURATION
# =============================================================================
# Model naming and file patterns
MODEL_NAME_PATTERN={symbol}_{timeframe}_{model_type}
CHECKPOINT_FILENAME=model.pt
METADATA_FILENAME=metadata.json
CONFIG_FILENAME=config.json

# =============================================================================
# MODEL TRAINING DEFAULTS
# =============================================================================
# Default training parameters for new models
DEFAULT_CONTEXT_LENGTH=64
DEFAULT_PREDICTION_LENGTH=1
DEFAULT_NUM_EPOCHS=10
DEFAULT_BATCH_SIZE=32
DEFAULT_LEARNING_RATE=0.001

# =============================================================================
# FALLBACK STRATEGY CONFIGURATION
# =============================================================================
# Enable/disable intelligent model fallback strategies
ENABLE_MODEL_FALLBACK=true

# Fallback strategy selection
# Options: none, timeframe_only, symbol_only, timeframe_and_symbol
FALLBACK_STRATEGY=timeframe_and_symbol

# Fallback priority lists (comma-separated)
# Timeframe priority for fallback (most preferred first)
FALLBACK_TIMEFRAME_PRIORITY=1d,4h,1h,15m,5m,1m,12h,1w
# Symbol priority for fallback (most preferred first)
FALLBACK_SYMBOL_PRIORITY=BTCUSDT,ETHUSDT,BNBUSDT
# Model type priority for fallback (most preferred first)
FALLBACK_MODEL_TYPE_PRIORITY=ibm/patchtst-forecasting,ibm/patchtsmixer-forecasting,pytorch-lightning/time-series-transformer,enhanced-transformer

# Fallback limits and timeout
MAX_FALLBACK_ATTEMPTS=5
FALLBACK_TIMEOUT=30.0

# =============================================================================
# DEVICE CONFIGURATION
# =============================================================================
# Force CPU usage (overrides GPU detection)
FORCE_CPU=false

# CUDA device configuration
CUDA_VISIBLE_DEVICES=
CUDA_DEVICE_MEMORY_FRACTION=0.8

# Mixed precision training for GPU memory efficiency
ENABLE_MIXED_PRECISION=true

# =============================================================================
# MODEL LIMITS
# =============================================================================
# Maximum allowed values for model parameters
MAX_CONTEXT_LENGTH=512
MAX_PREDICTION_LENGTH=24
MAX_NUM_EPOCHS=100

# =============================================================================
# CACHE SETTINGS
# =============================================================================
# Model caching configuration for performance
ENABLE_MODEL_CACHE=true
MAX_CACHED_MODELS=5

# =============================================================================
# SERVING ADAPTER CONFIGURATION
# =============================================================================
# Serving backend selection (simple, triton, torchserve)
SERVING_ADAPTER_TYPE=simple

# =============================================================================
# SIMPLE ADAPTER SETTINGS
# =============================================================================
# In-memory model serving configuration
SIMPLE_MAX_MODELS_IN_MEMORY=5
SIMPLE_MODEL_TIMEOUT_SECONDS=3600

# =============================================================================
# TRITON ADAPTER SETTINGS
# =============================================================================
# Triton Inference Server connection
TRITON_SERVER_URL=localhost:8000
TRITON_SERVER_GRPC_URL=localhost:8001
TRITON_USE_GRPC=false
TRITON_SSL=false
TRITON_INSECURE=true

# Triton model repository and configuration
TRITON_MODEL_REPOSITORY=/models
TRITON_DEFAULT_MODEL_VERSION=1
TRITON_MAX_BATCH_SIZE=8
TRITON_TIMEOUT_SECONDS=30

# =============================================================================
# TORCHSERVE ADAPTER SETTINGS
# =============================================================================
# TorchServe connection URLs
TORCHSERVE_INFERENCE_URL=http://localhost:8080
TORCHSERVE_MANAGEMENT_URL=http://localhost:8081
TORCHSERVE_METRICS_URL=http://localhost:8082

# TorchServe configuration
TORCHSERVE_MODEL_STORE=./model_store
TORCHSERVE_BATCH_SIZE=1
TORCHSERVE_MAX_BATCH_DELAY=100
TORCHSERVE_TIMEOUT_SECONDS=30
TORCHSERVE_INITIAL_WORKERS=1
TORCHSERVE_MAX_WORKERS=4

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis connection for caching and job management
REDIS_URL=redis://localhost:6379/0

# Training job repository type
# Options: file, redis
TRAINING_JOB_REPOSITORY_TYPE=file

# =============================================================================
# CLOUD STORAGE CONFIGURATION
# =============================================================================
# Storage provider selection (minio, digitalocean, aws, s3)
STORAGE_PROVIDER=minio

# =============================================================================
# S3-COMPATIBLE STORAGE SETTINGS (MinIO, AWS S3)
# =============================================================================
# MinIO local development settings
S3_ENDPOINT_URL=http://localhost:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin
S3_REGION_NAME=us-east-1
S3_BUCKET_NAME=market-data
S3_USE_SSL=false
S3_VERIFY_SSL=true
S3_SIGNATURE_VERSION=s3v4
S3_MAX_POOL_CONNECTIONS=50

# =============================================================================
# DIGITALOCEAN SPACES SPECIFIC SETTINGS
# =============================================================================
# DigitalOcean Spaces configuration for cloud storage
SPACES_ENDPOINT_URL=https://nyc3.digitaloceanspaces.com
SPACES_ACCESS_KEY=
SPACES_SECRET_KEY=
SPACES_REGION_NAME=nyc3
SPACES_BUCKET_NAME=finsight-market-data

# =============================================================================
# AWS S3 SPECIFIC SETTINGS
# =============================================================================
# AWS S3 configuration for direct AWS integration
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION_NAME=us-east-1
AWS_BUCKET_NAME=finsight-market-data

# =============================================================================
# UNIFIED STORAGE SETTINGS
# =============================================================================
# Provider-agnostic storage configuration (overrides provider-specific settings)
STORAGE_ENDPOINT_URL=
STORAGE_ACCESS_KEY=
STORAGE_SECRET_KEY=
STORAGE_REGION=
STORAGE_BUCKET=
STORAGE_USE_SSL=
STORAGE_VERIFY_SSL=
STORAGE_SIGNATURE_VERSION=
STORAGE_MAX_POOL_CONNECTIONS=
STORAGE_ADDRESSING_STYLE=

# =============================================================================
# STORAGE PREFIX CONFIGURATION
# =============================================================================
# Storage prefix configuration for object storage
DATASET_STORAGE_PREFIX=finsight/market_data/datasets
MODEL_STORAGE_PREFIX=finsight/models
STORAGE_SEPARATOR=/

# =============================================================================
# CLOUD STORAGE ENABLEMENT FLAGS
# =============================================================================
# Cloud storage feature toggles
ENABLE_CLOUD_STORAGE=true
ENABLE_MODEL_CLOUD_SYNC=true
CLOUD_STORAGE_FALLBACK_ENABLED=true

# =============================================================================
# DATA LOADER CONFIGURATION
# =============================================================================
# Data loader type selection (local, cloud, hybrid)
DATA_LOADER_TYPE=local

# Cloud data cache configuration
CLOUD_DATA_CACHE_DIR=
CLOUD_DATA_CACHE_TTL_HOURS=24

# =============================================================================
# DEFAULT SYMBOLS AND TIMEFRAMES
# =============================================================================
# Default symbols for data loading (comma-separated)
DEFAULT_SYMBOLS=BTCUSDT,ETHUSDT,BNBUSDT

# Default timeframes for data loading (comma-separated)
DEFAULT_TIMEFRAMES=1h,4h,1d

# =============================================================================
# EXPERIMENT TRACKER CONFIGURATION
# =============================================================================
# Experiment tracker type selection (simple, mlflow)
EXPERIMENT_TRACKER_TYPE=mlflow
EXPERIMENT_TRACKER_FALLBACK=simple

# =============================================================================
# MLFLOW CONFIGURATION
# =============================================================================
# MLflow tracking server configuration
MLFLOW_TRACKING_URI=http://localhost:5000
MLFLOW_EXPERIMENT_NAME=finsight-ml

# =============================================================================
# MODEL SAVING CONFIGURATION
# =============================================================================
# Model saving and format options
SAVE_MULTIPLE_FORMATS=true

# Enabled adapters for model serving
# Options: simple, torchscript, torchserve, triton
ENABLED_ADAPTERS=simple

# Cloud sync configuration for adapters
CLOUD_SYNC_ADAPTERS=simple
ENABLE_CLOUD_UPSERT=true

# =============================================================================
# CLEANUP CONFIGURATION
# =============================================================================
# Background cleanup interval
# Options: 1m, 5m, 15m, 1h, 4h, 12h, 1d, 1w, disabled
CLEANUP_INTERVAL=1d

# Cleanup targets configuration
ENABLE_CLOUD_CACHE_CLEANUP=true
ENABLE_DATASETS_CLEANUP=true
ENABLE_MODELS_CLEANUP=true

# Cleanup age thresholds (in hours)
CLOUD_CACHE_MAX_AGE_HOURS=24
DATASETS_MAX_AGE_HOURS=168
MODELS_MAX_AGE_HOURS=720

# =============================================================================
# VALIDATION RULES AND CONSTRAINTS
# =============================================================================
# The following constraints are automatically enforced:

# Ports: 1-65535
# Context Length: 10-1000
# Prediction Length: 1-100
# Epochs: 1-200
# Batch Size: 1-512
# Learning Rate: 1e-6 to 1.0
# CUDA Memory Fraction: 0.0 to 1.0
# Eureka intervals: 1-300 seconds
# Eureka durations: 30-900 seconds
# Eureka retry attempts: 1-10
# Eureka backoff multiplier: 1.0-5.0
# Fallback attempts: 1-20
# Fallback timeout: 5-300 seconds
# Cache TTL: 60-86400 seconds
# Cleanup intervals: 1m, 5m, 15m, 1h, 4h, 12h, 1d, 1w, disabled

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATION EXAMPLES
# =============================================================================

# Development Environment
# DEBUG=true
# LOG_LEVEL=DEBUG
# ENABLE_MODEL_CACHE=false
# CLEANUP_INTERVAL=5m
# ENABLE_CLOUD_STORAGE=false
# DATA_LOADER_TYPE=local

# Staging Environment
# DEBUG=false
# LOG_LEVEL=INFO
# ENABLE_MODEL_CACHE=true
# CLEANUP_INTERVAL=1h
# ENABLE_CLOUD_STORAGE=true
# DATA_LOADER_TYPE=hybrid

# Production Environment
# DEBUG=false
# LOG_LEVEL=WARNING
# ENABLE_MODEL_CACHE=true
# CLEANUP_INTERVAL=1d
# ENABLE_CLOUD_STORAGE=true
# DATA_LOADER_TYPE=cloud
# ENABLE_MODEL_FALLBACK=true
# MAX_CACHED_MODELS=10

# =============================================================================
# STORAGE PROVIDER CONFIGURATION EXAMPLES
# =============================================================================

# MinIO Local Development
# STORAGE_PROVIDER=minio
# S3_ENDPOINT_URL=http://localhost:9000
# S3_ACCESS_KEY=minioadmin
# S3_SECRET_KEY=minioadmin
# S3_BUCKET_NAME=market-data

# DigitalOcean Spaces
# STORAGE_PROVIDER=digitalocean
# SPACES_ENDPOINT_URL=https://nyc3.digitaloceanspaces.com
# SPACES_ACCESS_KEY=your-spaces-key
# SPACES_SECRET_KEY=your-spaces-secret
# SPACES_BUCKET_NAME=finsight-market-data

# AWS S3
# STORAGE_PROVIDER=aws
# AWS_ACCESS_KEY_ID=your-aws-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret
# AWS_REGION_NAME=us-east-1
# AWS_BUCKET_NAME=finsight-market-data

# =============================================================================
# SERVING ADAPTER CONFIGURATION EXAMPLES
# =============================================================================

# Simple Adapter (In-Memory)
# SERVING_ADAPTER_TYPE=simple
# SIMPLE_MAX_MODELS_IN_MEMORY=10
# SIMPLE_MODEL_TIMEOUT_SECONDS=7200

# Triton Adapter (High Performance)
# SERVING_ADAPTER_TYPE=triton
# TRITON_SERVER_URL=localhost:8000
# TRITON_USE_GRPC=true
# TRITON_MAX_BATCH_SIZE=16

# TorchServe Adapter (Production Ready)
# SERVING_ADAPTER_TYPE=torchserve
# TORCHSERVE_INFERENCE_URL=http://localhost:8080
# TORCHSERVE_MAX_WORKERS=8
# TORCHSERVE_BATCH_SIZE=4

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# High Throughput Configuration
# DEFAULT_BATCH_SIZE=64
# MAX_CACHED_MODELS=10
# SIMPLE_MAX_MODELS_IN_MEMORY=10
# ENABLE_MIXED_PRECISION=true
# CUDA_DEVICE_MEMORY_FRACTION=0.9

# Low Memory Configuration
# DEFAULT_BATCH_SIZE=16
# MAX_CACHED_MODELS=3
# SIMPLE_MAX_MODELS_IN_MEMORY=3
# ENABLE_MIXED_PRECISION=false
# CUDA_DEVICE_MEMORY_FRACTION=0.5

# High Quality Configuration
# DEFAULT_NUM_EPOCHS=50
# DEFAULT_LEARNING_RATE=5e-5
# ENABLE_MODEL_FALLBACK=true
# MAX_FALLBACK_ATTEMPTS=10
# FALLBACK_TIMEOUT=60.0

# =============================================================================
# FALLBACK STRATEGY EXAMPLES
# =============================================================================

# Conservative Fallback
# FALLBACK_STRATEGY=timeframe_and_symbol
# FALLBACK_TIMEFRAME_PRIORITY=1d,4h,1h
# FALLBACK_SYMBOL_PRIORITY=BTCUSDT,ETHUSDT
# MAX_FALLBACK_ATTEMPTS=3

# Aggressive Fallback
# FALLBACK_STRATEGY=timeframe_and_symbol
# FALLBACK_TIMEFRAME_PRIORITY=1d,4h,1h,15m,5m,1m
# FALLBACK_SYMBOL_PRIORITY=BTCUSDT,ETHUSDT,BNBUSDT,ADAUSDT
# MAX_FALLBACK_ATTEMPTS=8

# Minimal Fallback
# FALLBACK_STRATEGY=timeframe_only
# FALLBACK_TIMEFRAME_PRIORITY=1d,4h
# MAX_FALLBACK_ATTEMPTS=2

# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================
# 1. Never commit API keys or secrets to version control
# 2. Use environment variables for all sensitive configuration
# 3. Rotate storage credentials regularly
# 4. Use IAM roles when possible (AWS)
# 5. Implement proper access controls for storage buckets
# 6. Monitor and log all model operations
# 7. Validate all input data before processing
# 8. Implement proper error handling for failures
# 9. Use secure model storage with proper access controls
# 10. Regularly update model dependencies and security patches
# 11. Use HTTPS for all external communications
# 12. Implement proper authentication for API endpoints

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================
# Configure appropriate log levels for different environments
# Development: LOG_LEVEL=DEBUG
# Staging: LOG_LEVEL=INFO
# Production: LOG_LEVEL=WARNING

# Monitor key metrics:
# - Model training success/failure rates
# - Inference latency and throughput
# - Cache hit/miss rates
# - Storage operation performance
# - GPU/CPU utilization
# - Memory usage patterns
# - Fallback strategy effectiveness
# - Cleanup operation success rates
# - Cloud storage sync status
# - Model serving adapter performance
# - Eureka client health and registration
# - Redis connection and performance
# - MLflow experiment tracking
# - Training job queue status