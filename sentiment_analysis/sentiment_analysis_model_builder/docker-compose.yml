services:
  # MinIO - S3-compatible object storage for MLflow artifacts
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mlflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket for MLflow artifacts
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/mlflow-artifacts --ignore-existing;
      /usr/bin/mc policy set public myminio/mlflow-artifacts;
      exit 0;
      "
    networks:
      - mlflow-network

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: ../../docker/Dockerfile.mlflow
    container_name: mlflow-server
    ports:
      - "5000:5000" # MLflow UI
    environment:
      # Database configuration (SQLite)
      MLFLOW_BACKEND_STORE_URI: sqlite:////mlflow/mlflow.db

      # Artifact storage configuration (MinIO)
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts/
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_DEFAULT_REGION: us-east-1

      # MLflow server configuration
      MLFLOW_HOST: 0.0.0.0
      MLFLOW_PORT: 5000
    command: >
      bash -c "
        pip install mlflow boto3 &&
        mlflow server
        --backend-store-uri sqlite:////mlflow/mlflow.db
        --default-artifact-root s3://mlflow-artifacts/
        --host 0.0.0.0
        --port 5000
        --serve-artifacts
      "
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      minio-setup:
        condition: service_completed_successfully
    networks:
      - mlflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  mlflow-network:
    driver: bridge

volumes:
  minio_data:
    driver: local
  mlflow_data:
    driver: local
